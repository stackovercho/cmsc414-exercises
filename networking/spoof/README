Spoofing and Denial of Service
==============================

We're going to do some packet spoofing!

Since we're going to focus on namespaces within a docker container
(which is itself a namespace), it's likely that wireshark won't be
able to capture the traffic. We're going to go old-school and use
`tcpdump` instead.

There's another method available, if you're running Linux, which is
described in detail at the end of this file. In that case, you *will*
be able to use wireshark.

The `baseline` image has `scapy`, which you can use to construct
packets with headers of your choosing in python (see the
`python-scapy` quick reference). To create a packet, you'd have
something like the following in your python script:

    from scapy.all import *
    pkt = IP(src='1.2.3.4', dst='2.3.4.5')/ICMP()
    send(pkt)

How to use `tcpdump`
--------------------

`tcpdump` is similar to wireshark, in that it captures, analyzes, and
displays network traffic. The most typical usage is

    tcpdump -i any

to see all of the traffic on any interface. You can restrict this to a
particular interface, if you know where you expect to see the traffic.
It's possible that you might need to run this as root, depending on
how your permissions are configured.

How to use Network Namespaces
-----------------------------

Linux has the concept of *network namespaces*, which are logically
separated network *stacks* (processors for network traffic from layers
2 through 7). We're going to be creating a testbed that runs within
a *privileged* docker container, and employs multiple namespaces.

Let's say we have a network namespace `foo` (created with `ip netns add foo`).
We can run any command we like within this namespace. For example,

    ip netns exec foo ls

will run the `ls` command in the namespace `foo`. (You'll need to run
this as root, either in a root shell or using `sudo`.) This isn't
terribly interesting, since the filesystem is unaffected by these
namespaces.  A more interesting example is

    ip netns exec foo ip link

Compare this with

    ip link

and you'll see the network interfaces in the `foo` namespace and the
global namespace, which should be different. There are some loopback
interfaces which may appear the same, but anything external to the
namespace will differ.

If we want to capture the traffic in our namespace, and only that
traffic, we can run

    ip netns exec foo tcpdump -i any


Starting the Testbed
--------------------

We've provided you with a script called `testbed.sh`, which will
create multiple network namespaces that are linked together with
*virtual ethernet* links.  It must be run in Linux. To use the
`baseline` image to create a suitable container, run the following:

    docker run --privileged -ti --rm -v "$(pwd):/opt" baseline

We have to provide the `--privileged` option because we need a
container that has elevated privileges, so that it can manipulate
network settings.

Once you're in the container (or on your other Linux platform), run

    sudo /opt/testbed.sh

adjusting the path to `testbed.sh` as appropriate for your
environment. By default, this will create three virtual hosts with
names `tb0`, `tb1`, and `tb2`, with addresses `1.2.3.4`, `1.2.3.5`,
and `1.2.3.6`. The `-h` option tells you how to customize the testbed.

After starting the testbed, try running

    sudo ip netns exec tb0 ip route
    sudo ip netns exec tb1 ip route
    sudo ip netns exec tb2 ip route
    sudo ip netns exec tb_bridge ip route

Testing Connectivity using `nc` or `ncat`
-----------------------------------------

Netcat is a useful tool for sending simple data between hosts.  There
are multiple versions of it, which behave slightly differently.  You
may have to experiment to figure out which version you have.

Let's begin with the version that's in the `baseline` docker image.
You can create a simple server with

    nc -l -p 1337

This is a TCP server that listens on port 1337, and will echo anything
sent to it. When the first client to connect closes the connection,
this server will terminate.

You can connect to it (do this from a separate shell) with

    nc localhost 1337

Start typing, and hit return. Each time you hit return, you should see
the line you just typed on the server end.

Here are some variations:

 * Some versions of `nc` do not want the `-p` flag, though you can
   still specify the port.
 * Some versions of `nc` and `ncat` support a *keepalive* flag `-k`,
   which does not terminate the server. The version on `baseline`
   claims to support this, but does not appear to honor it.
 * `ncat` mostly behaves just like `nc` (for our purposes), and honors
   the `-k` flag. The `-p` flag is optional when specifying a port.

If you don't have `nc` on your system, and it's not available through
your normal package manager, you can install `ncat` as part of the
`nmap` toolkit, from https://nmap.org

We can test our namespaces by doing the following. In one shell, run

    ip netns exec tb0 nc -l -p 1337

In another shell, run

    ip netns exec tb1 nc 1.2.3.4 1337

Once again, type lines of text in the second shell, and they should
appear in the first.


Exercise 1: Spoofed Ping
------------------------

For this, you will use the testbed, and assign one namespace to each
of three roles:

 * Attacker -- the one doing the attack, which is the hard (but
               fun!) part
 * Victim -- the one having attack traffic directed at them
 * Reflector -- an innocent third party, co-opted into participating
                in the attack

Let's assume that `tb0` is the Attacker, `tb1` is the Victim, and
`tb2` is the Reflector. The goal is for the Attacker to send an ICMP
Echo Request (ping) to the Reflector, with the Victim's address
spoofed as the sender.

The scapy code at the beginning of this file should get you started.
You should have *at least* three terminals open on the container where
the testbed is running. The Victim and Reflector should both be
running `tcpdump`, capturing all interfaces. You can optionally run
`tcpdump` on the Attacker (where "on" means in its
namespace). Pro-tip: you can specify a filter to `tcpdump`:

    ip netns exec td1 tcpdump -i any icmp

Here's what you should see:

Attacker: ICMP Echo Request packets going out, but no Echo
          Replies coming back

Reflector: ICMP Echo Requests coming from the Victim's IP, and
           Echo Replies going to the Victim

Victim: ICMP Echo Replies coming in with no corresponding Echo
        Requests

When you're done, simply exit the container, and everything will be
cleaned up automatically. If you're not running the testbed in docker,
you will need to remove the namespaces manually before you can
configure a new one (make sure there are no other namespaces with `ip
netns list`!):

    sudo ip -all netns delete


Exercise 2: Distributed Denial-of-Service
-----------------------------------------

Now that we have a way to spoof pings, let's see how we might make
this a DDoS attack. If you have more than three namespaces, you can
add more Attackers and more Reflectors, in order to concentrate more
traffic on the Victim. In our testbed, we can add more namespaces with
the `-n <num_hosts>` option.

Is it better to have more Reflectors or more Attackers? What seems to
limit your ability to flood the Victim?

Spoofing using the Linux Firewall
---------------------------------

If you're running Linux, either natively or as a VM, it has a program
called `iptables`. This is a firewall that comes with Linux, and it can
do quite a lot of things.  One of these is to rewrite packets, which
allows us to act as a NAT (for example).

As you might guess, iptables is organized into *tables*. One of
these is the "nat" table. It has a chain (a grouping of rules)
called "POSTROUTING", against which packets are checked after their
outgoing interface is selected.

Here's how we see the current state of a table:

    sudo iptables -t nat --list -v

This says to perform an operation on the "nat" table, and that
operation is to list the current chains (and their rules). The "-v"
flag will print verbose information, including rule numbers. This
will be helpful later.

Try running this, and seeing what's there. It's probably empty.

We're once again going to use `nc` (or `ncat`).  Try the following:

    nc 128.8.130.3 12

Now just type some garbage, and hit Ctrl-C. This is the IP address for
gizmonic (a VM I sometimes use for my courses), in case you were
wondering, and the 12 refers to the TCP port we're going to try (and
fail) to connect to. In wireshark, put the following as a filter to
make life easier:

    ip.dst==128.8.130.3

Now you'll only see traffic destined for gizmonic.


Back to iptables...

Here's how we write a table entry:

    sudo iptables -t nat -A POSTROUTING <rule-spec>

The <rule-spec> tells us what packets to match, and what to do with
them if they do.

There are a number of things that go into a rule specification, and you can
read lots of details in the man page for iptables.  Here are a few things
we'll use:

  -p <proto>
    This specifies the protocol (eg, TCP or UDP) to use. See the
    manpage for iptables for the values that can be specified.

  -m <match> <match-spec>
    This specifies more complex matching. You may or may not want
    to use this.

  -j <target> <target-spec>
    This specifies the target for a matching packet. That is, what
    do we do with that packet?

Here's the rule we're going to set:

    sudo iptables -t nat -A POSTROUTING -p tcp --dport 12 -j SNAT --to-source 1.2.3.4

What is this doing? We're matching TCP packets with a destination
port of 12. Then we're going to apply a source-NAT rule that rewrite
the source address to 1.2.3.4

Run the `nc` command again, and see what shows up in wireshark. Pretty
cool, right? Try changing the 12 to some other value, and see what
happens. Try connecting to some other IP address on port 12, as
well. Is this specific to gizmonic or not?

Now, run your iptables list command again. What do you see?

Finally, let's clean things up. We do this with

    sudo iptables -t nat -D POSTROUTING <rule-num>

The last command you ran should tell you what to put for <rule-num>.
You can verify that you get the expected behavior by running nc to
port 12 again.
